<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Developer_Guide-Getting_started_with_RichFaces">
	<title>Getting started with RichFaces</title>
	<para>
		Follow the instructions in this chapter to configure the RichFaces framework and get started with application development.
	</para>
	<para>
		If you have existing projects that use a previous version of RichFaces, refer to the <citetitle>RichFaces Migration Guide</citetitle>.
	</para>
	
	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Technical_Requirements">
		<title>Technical Requirements</title>
		<para>
			The minimum technical requirements needed to get started with RichFaces are outlined below.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Java Development Kit (<acronym>JDK</acronym>) 6 or higher
				</para>
			</listitem>
			<listitem>
				<para>
					An application server compliant with Java Platform, Enterprise Edition 6 (<acronym>JEE6</acronym>), such as <productname>JBoss Application Server 7</productname> or a servlet container coupled with a JSF implementation, such as Apache Tomcat + Mojarra 2.x.
				</para>
			</listitem>
			<listitem>
				<para>
					A compliant web browser, such as <productname>Firefox 17</productname>, <productname>Chrome 23</productname>, or <productname>Internet Explorer 9</productname>
				</para>
			</listitem>
		</itemizedlist>
		<!--
		<para>
			RichFaces supports additional products not listed here. Refer to <xref linkend="sect-Component_Reference-RichFaces_overview-Full_technical_requirements" /> for a full list of technical requirements and supported envrionments, browsers, and tools.
		</para>
		-->
		
        <section id="sect-Developer_Guide-Getting_started_with_RichFaces-Technical_Requirements-Project_libraries_and_dependencies">
            <title>Project libraries and dependencies</title>
            
            <para>
                RichFaces library comes in form of Java archives for Core Framework and Components. 
            </para>
            
            <itemizedlist>
                <title>RichFaces libraries</title>
                <listitem>
                    <para>
                        <filename>richfaces-core-api.jar</filename>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <filename>richfaces-core-impl.jar</filename>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <filename>richfaces-components-api.jar</filename>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <filename>richfaces-components-ui.jar</filename>
                    </para>
                </listitem>
            </itemizedlist>
            
            <para>
                The framework depends on third-party dependencies which can be classified to mandatory and optional (libraries enabling certain functionality).
            </para>
            <para>
                Note that these dependencies may depend on their own runtime dependencies.
            </para>
                
            <itemizedlist>
                <title>Mandatory third-party dependencies</title>
                <listitem>
                    <para>
                        Java Server Faces 2.x implementation
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>javax.faces.jar</filename> (version <code>2.1.5</code> or higher)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                or <filename>myfaces-impl.jar</filename> (version <code>2.1.5</code> or higher)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Google Guava
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>guava.jar</filename> (version <code>10.0.1</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        CSS Parser
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>cssparser.jar</filename> (version <code>0.9.5</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Simple API for CSS
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>sac.jar</filename> (version <code>1.3</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
                
            <itemizedlist>
                <title>Optional third-party dependencies</title>
                <listitem>
                    <para>
                        Bean validation (JSR-303) integration for client-side validation (JSR-303 API and Implementation)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>validation-api.jar</filename> (version <code>1.0.0.GA</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>hibernate-validator.jar</filename> (version <code>4.2.0.Final</code> or higher)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Push transport library - Atmosphere (without dependencies)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>atmosphere-runtime.jar</filename> (version <code>0.8.4</code>)
                            </para>
                            <para>
                                (selected compatibility modules <filename>atmosphere-compat-*.jar</filename> may be necessary)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Push JMS integration (JMS API and Implementation)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>jms.jar</filename> (version <code>1.1</code>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <filename>hornetq-jms.jar</filename> (version <code>2.2.7.Final</code> or higher)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Push CDI integration (CDI API and Implementation)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>cdi-api.jar</filename> (version <code>1.0-SP4</code>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <filename>javax.inject.jar</filename> (version <code>1</code>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <filename>jsr-250-api.jar</filename> (version <code>1.0</code>)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <filename>weld-servlet.jar</filename> (version <code>1.1.4.Final</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Extended caching (EhCache)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <filename>ehcache.jar</filename> (version <code>1.6.0</code>)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            
            <note>
                <title>Dependencies for servlet containers</title>
                <para>
                    Some of dependencies are part of Java EE 6 specification and thus it is not necessary to include them in projects running on Java EE applications servers.
                </para>
                <para>
                    It is still necessary to include them on servlet containers.
                </para>
                <para>
                    Dependencies on Servlet API, JSP API and EL API are excluded since these are integral parts of both application servers and servlet containers.
                </para>
            </note>
        </section>
	</section>

	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Development_environments">
		<title>Development environments</title>
		<para>
			RichFaces applications can be developed using a range of tools, including integrated development environments (<acronym>IDE</acronym>s). This chapter covers only two such environments in detail:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<productname>JBoss Tools</productname>, as described in <xref linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_JBoss_Tools" />. 
				</para>
			</listitem>
			<listitem>
				<para>
					<productname>Maven</productname>, as described in <xref linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_Maven" />. 
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Other environments, such as <productname>Idea</productname> or <productname>NetBeans</productname>, could also be used for RichFaces development, but are not detailed in this book.
		</para>
	</section>
	
	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Setting_up_RichFaces">
		<title>Setting up RichFaces</title>
		<para>
			Follow the instructions in this section to set up the RichFaces framework and begin building applications.
		</para>
		<procedure>
			<step>
				<title>Download RichFaces archive</title>
				<para>
					Download RichFaces from the JBoss RichFaces Downloads area at <ulink url="http://www.jboss.org/richfaces/download.html">http://www.jboss.org/richfaces/download.html</ulink>. The binary files (available in <filename class="extension">.zip</filename> or <filename class="extension">.bin.tar.gz</filename> archives) contain the following:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							compiled, ready-to-use Java Archives (<acronym>JAR</acronym> files) of the RichFaces libraries
						</para>
					</listitem>
					<listitem>
						<para>
							library source JAR files
						</para>
					</listitem>
					<listitem>
						<para>
							documentation, including Java documentation and JavaScript documentation
						</para>
					</listitem>
					<listitem>
						<para>
							archetypes
						</para>
					</listitem>
					<listitem>
						<para>
							example source code
						</para>
					</listitem>
				</itemizedlist>
				<!-- TODO not in Final
				<stepalternatives>
					<step>
						<title>Using the Component Development Kit (<acronym>CDK</acronym>) distribution</title>
						<para>
							Instead of using the standard distribution, you could download the distribution that includes the Component Development Kit (<acronym>CDK</acronym>). This distribution provides a tool for creating and developing new components using the RichFaces framework.
						</para>
					</step>
				</stepalternatives>
				-->
			</step>
			<step>
				<title>Unzip archive</title>
				<para>
					Create a new directory named <filename>RichFaces</filename>, then unzip the archive containing the binaries there.
				</para>
			</step>
		</procedure>

	</section>
	
	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_JBoss_Tools">
		<title>Creating a project with <productname>JBoss Tools</productname></title>
		<para>
			Follow the procedure in this section to create a new RichFaces application with <productname>JBoss Tools</productname> Ensure you are using the latest version of <productname>JBoss Tools</productname>.
		</para>
		<procedure>
			<step id="step-Developer_Guide-Creating_a_project-Create_a_new_project">
				<title>Create a new project</title>
				<para>
					Create a new project based on the JSF 2 environment using the RichFaces 4 template. In <productname>JBoss Tools</productname>, select <menuchoice><guimenu>File</guimenu><guimenuitem>New</guimenuitem><guimenuitem>JSF Project</guimenuitem></menuchoice> from the menu. Name the project, select <guilabel>JSF 2</guilabel> from the <guilabel>JSF Environment</guilabel> drop-down box, and click the <guibutton>Finish</guibutton> button to create the project.
				</para>
				<para>
					If necessary, update the JSF 2 JAR files to the latest versions.
				</para>
			</step>
			<step id="step-Developer_Guide-Creating_a_project-Add_the_RichFaces_libraries_to_the_project">
				<title>Add the RichFaces libraries to the project</title>
				<para>
					Add <link linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Technical_Requirements-Project_libraries_and_dependencies">RichFaces libraries and their mandatory dependencies</link> to the project. Copy them from the location where you unzipped the RichFaces archive to the <filename>WebContent/WEB-INF/lib/</filename> directory of your project in <application>JBoss Tools</application>.
				</para>
			</step>
			<step id="step-Developer_Guide-Creating_a_project-Reference_the_tag_libraries">
				<title>Reference the tag libraries</title>
				<para>
					The RichFaces tag libraries need to be referenced on each XHTML page in your project:
				</para>
<programlisting language="XML" role="XML">&lt;ui:composition xmlns:a4j="http://richfaces.org/a4j"
                xmlns:rich="http://richfaces.org/rich"&gt;
   ...
&lt;/ui:composition&gt;
</programlisting>
			</step>
		</procedure>
		
		<para>
			You are now ready to begin constructing your RichFaces applications. RichFaces components can be dragged and dropped into your application's XHTML pages from the RichFaces palette in <productname>JBoss Tools</productname>.
			<!--, shown in <xref linkend="figu-Developer_Guide-Creating_a_project-RichFaces_palette_in_JBoss_Tools" />-->
		</para>
		<!-- TODO need an updated screenshot
		<figure id="figu-Developer_Guide-Creating_a_project-RichFaces_palette_in_JBoss_Tools">
			<title>RichFaces palette in JBoss Tools</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Developer_Guide-Creating_a_project-RichFaces_palette_in_JBoss_Tools.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The RichFaces palette in JBoss Tools, showing a list of components for addition use in a web application.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		-->
	</section>
	
	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_Maven">
		<title>Creating a project with <productname>Maven</productname></title>
		<para>
			<productname>Apache Maven</productname> is a build automation and project management tool for Java projects. Follow the instructions in this section to create a <productname>Maven</productname> project for <productname>RichFaces</productname>.
		</para>
		<section id="sect-Component_Using_RichFaces_with_Maven-Setting_up_Maven">
			<title>Setting up <productname>Maven</productname></title>
			<para>
				<productname>Maven</productname> can be downloaded and installed from Apache's website at <ulink url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>. Due to the use of dependency importing, <productname>Maven</productname> version 3.0.3 or above is required.
			</para>
			<para>
				Once <productname>Maven</productname> has been installed, no further configuration is required to begin building Maven projects.
			</para>
		</section>
		<section id="sect-Component_Reference-Using_RichFaces_with_Maven-Using_the_RichFaces_project_archetype">
			<title>Using the <productname>RichFaces</productname> project archetype</title>
			<para>
				A Maven archetype is a template for creating projects. <productname>Maven</productname> uses an archetype to generate a directory structure and files for a particular project, as well as creating <filename>pom.xml</filename> files that contain build instructions.
			</para>
			<para>
				The RichFaces Component Development Kit includes a Maven archetype named <filename>richfaces-archetype-simpleapp</filename> for generating the basic structure and requirements for a RichFaces application project. Maven can obtain the archetype from the JBoss repository at <ulink url="https://repository.jboss.org/nexus/content/groups/public/">https://repository.jboss.org/nexus/content/groups/public/</ulink>. The archetype is also included with the RichFaces source code in the <filename>archetypes</filename> directory. Follow the procedure in this section to generate a new Maven-based RichFaces project using the archetype.
			</para>
			<procedure>
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Add_required_repositories">
					<title>Add required repository</title>
					<para>
						 The details for the JBoss repository need to be added to <productname>Maven</productname> so it can access the archetype. Add a profile in the <filename><replaceable>maven_installation_folder</replaceable>/conf/settings.xml</filename> file under the <sgmltag>&lt;profiles&gt;</sgmltag> element:
					</para>
				
	<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Using_RichFaces_with_Maven-Add_required_repositories.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The profile then needs to be activated in the <sgmltag>&lt;activeProfiles&gt;</sgmltag> element:
					</para>
<programlisting language="XML" role="XML">&lt;activeProfiles&gt;
   &lt;activeProfile&gt;jboss-public-repository&lt;/activeProfile&gt;
&lt;/activeProfiles&gt;</programlisting>
					<para>
						For further details, refer to the <citetitle>JBoss RichFaces Wiki</citetitle>.
					</para>
				</step>
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Generate_the_project_from_the_archetype">
					<title>Generate the project from the archetype</title>
					<para>
						The project can now be generated with the <filename>richfaces-archetype-simpleapp</filename> archetype. Create a new directory for your project, then run the following Maven command in the directory:
					</para>
	<screen>mvn archetype:generate -DarchetypeGroupId=org.richfaces.archetypes -DarchetypeArtifactId=richfaces-archetype-simpleapp -DarchetypeVersion=4.3.0-SNAPSHOT -DgroupId=<replaceable>org.docs.richfaces</replaceable> -DartifactId=<replaceable>new_project</replaceable></screen>
					<para>
						The following parameters can be used to customize your project:
					</para>
					<variablelist>
						<varlistentry>
							<term><command>-DgroupId</command></term>
							<listitem>
								<para>
									Defines the package for the Managed Beans
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><command>-DartifactId</command></term>
							<listitem>
								<para>
									Defines the name of the project
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
					<para>
						The command generates a new RichFaces project with the following structure:
					</para>
	<screen><replaceable>new_project</replaceable>
	├── <filename>pom.xml</filename>
	├── <filename>readme.txt</filename>
	└── <filename>src</filename>
		└── <filename>main</filename>
		    ├── <filename>java</filename>
		    │   └── <filename>org</filename>
		    │       └── <filename>docs</filename>
		    │           └── <filename>richfaces</filename>
		    │               └── <filename>RichBean.java</filename>
		    └── <filename>webapp</filename>
		        ├── <filename>index.xhtml</filename>
		        ├── <filename>templates</filename>
		        │   └── <filename>template.xhtml</filename>
		        └── <filename>WEB-INF</filename>
		            ├── <filename>faces-config.xml</filename>
		            └── <filename>web.xml</filename></screen>
				</step>
				
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Add_dependencies">
					<title>Add test dependencies (optional)</title>
					<para>
						Your root directory of your project contains a project descriptor file, <filename>pom.xml</filename>. If you wish to include modules for test-driven JSF development, add any dependencies for the tests to the <filename>pom.xml</filename> file.
					</para>
                    <para>
                        For testing server-side part of your implementation, check out <ulink url="http://www.jboss.org/arquillian"><productname>JBoss Arquillian project</productname></ulink>.
                    </para>
                    <para>
                        If you want to test JSF from client's perspective with ability to access state of JSF internals, use <ulink url="http://www.jboss.org/jsfunit"><productname>JBoss JSFUnit project</productname></ulink> (with Arquillian integration).  
                    </para>
                    <para>
                        For automation of client-side tests in real-browser, you may want to employ <ulink url="http://community.jboss.org/wiki/ArquillianAjocado"><productname>Arquillian Ajocado</productname></ulink> and <ulink url="https://docs.jboss.org/author/display/ARQ/Drone"><productname>Arquillian Drone</productname></ulink> extensions.
                    </para>
                    <para>
                        For mocking JSF environment, there is set of tools in RichFaces <productname>jsf-test</productname> project. For full details on how to use the <productname>jsf-test</productname> project, refer to article <ulink url="http://community.jboss.org/docs/DOC-13155">Test Driven JSF Development</ulink>.
                    </para>
				</step>
			
<!--
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Update_the_generated_project">
					<title>Update the generated project</title>
					<para>
						After the project has been generated from the old archetype, it must be updated to use RichFaces &VERSION; and JSF 2.
					</para>
					<para>
						RichFaces &VERSION; uses Facelets and does not support JSP. Any <filename>index.jsp</filename> pages that were generated need to forward <filename>home.jsf</filename> page equivalents.
					</para>
					<substeps>
						<step>
							<title>Deactivate the VDL view handler</title>
							<para>
								The <acronym>VDL</acronym> (View Definition Language) view handler must be deactivated for your project to work with JSF 2. To deactivate the viewhandler, edit the project's <filename>web.xml</filename> settings file with the following context parameter:
							</para>
	<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Using_RichFaces_with_Maven-Update_the_generated_project.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</step>
					</substeps>
				</step>
-->
			
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Build_the_project">
					<title>Build the project</title>
					<para>
						Build the project from the command line by entering the <command>mvn install</command> command.
					</para>
					<para>
						The <computeroutput>BUILD SUCCESSFUL</computeroutput> message indicates the project has been assembled and is ready to import into an IDE (integrated development environment), such as <productname>JBoss Tools</productname>.
					</para>
				</step>

				<!--deprecated-->
				<!--
						<step>
							<title>Use <application>Maven</application> to prepare the project for <application>Eclipse</application></title>
							<substeps>
								<step>
									<para>
										Enter the following command in the root directory of the project:
									</para>
									<screen>mvn eclipse:eclipse -DdownloadSources=true -Dwtpversion=2.0</screen>
									<para>
										The command generates the required <application>Eclipse</application> project files.
									</para>
								</step>
								<step>
									Import the project into <application>Eclipse</application> and <application>JBoss Tools</application> through the importing wizard by choosing <menuchoice><guimenu>File</guimenu><guimenuitem>Import</guimenuitem></menuchoice> from the menu. Select <menuchoice><guimenu>General</guimenu><guimenuitem>Existing Projects into Workspace</guimenuitem></menuchoice> as the import source and choose the root directory for your project.
								</step>
							</substeps>
						</step>
				-->
			
				<step id="step-Developer_Guide-Using_RichFaces_with_Maven-Import_the_project_into_an_IDE">
					<title>Import the project into an IDE</title>
					<para>
						To import the project into <productname>Eclipse</productname> and <productname>JBoss Tools</productname>, use the JBoss Maven Integration plug-ins. These plug-ins work with plug-ins from the M2Eclipse project to import Maven projects.
					</para>
					<substeps>
						<step>
							<title>Install the plug-ins</title>
							<substeps>
								<step>
									<para>
										Choose <menuchoice><guimenu>Help</guimenu><guimenuitem>Install New Software</guimenuitem></menuchoice> from the Eclipse menu.
									</para>
								</step>
								<step>
									<para>
										Select the JBoss Tools update site to use, then open the <guilabel>Maven Support</guilabel> group and select the <guilabel>JBoss Maven Integration</guilabel> and <guilabel>JBoss Maven JSF Configurator</guilabel> plug-ins.
									</para>
								</step>
								<step>
									<para>
										Follow the prompts to install the integration plug-ins. The installation will automatically include the transitive dependencies <guilabel>Maven Integration for Eclipse</guilabel> and <guilabel>Maven Integration for WTP</guilabel>. Both of these dependencies are from the M2Eclipse project.
									</para>
								</step>
								<step>
									<para>
										Restart Eclipse to finish the installation.
									</para>
								</step>
							</substeps>
						</step>
						<step>
							<title>Open the importing wizard</title>
							<para>
								With the plug-ins installed, open the importing wizard by choosing <menuchoice><guimenu>File</guimenu><guimenuitem>Import</guimenuitem></menuchoice> from the menu.
							</para>
						</step>
						<step>
							<title>Select the project</title>
							<para>
								Select <menuchoice><guimenu>Maven</guimenu><guimenuitem>Existing Maven Projects</guimenuitem></menuchoice> as the import source and choose the directory with the <filename>pom.xml</filename> file for your project.
							</para>
						</step>
					</substeps>
					<note>
						<title>Exporting from Maven</title>
						<para>
							The ability to prepare the project for Eclipse and export it using Maven is deprecated in RichFaces 4.3.0-SNAPSHOT. The process does not support JBoss integration-specific features, such as JSF Facets.
						</para>
					</note>
				</step>
			</procedure>
		
			<para>
				Your project is now ready to use. Once components and functionality have been added, you can run the application on a server and access it through a web browser at the address <filename>http://localhost:8080/<replaceable>jsf-app</replaceable>/</filename>.
			</para>
		</section>
		
	</section>
	
	<section id="sect-Developer_Guide-Getting_started_with_RichFaces-Using_RichFaces_in_existing_JSF2_projects">
		<title>Using RichFaces in existing JSF 2 projects</title>
		<para>
			RichFaces can be added to existing JSF 2 projects by adding the new RichFaces libraries. Refer to <xref linkend="step-Developer_Guide-Creating_a_project-Add_the_RichFaces_libraries_to_the_project" /> and <xref linkend="step-Developer_Guide-Creating_a_project-Reference_the_tag_libraries" /> in <xref linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_JBoss_Tools" /> for details.
		</para>

		<note>
			<title>Application-level settings</title>
			<para>
				In RichFaces 4, it is not necessary to add any extra settings to the <filename>web.xml</filename> or <filename>config.xml</filename> settings files to use the framework.
			</para>
		</note>
	</section>

</chapter>

